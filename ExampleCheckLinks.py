#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemple d'utilisation de la m√©thode check_links()
pour v√©rifier les liens dans un document Markdown.
"""

from mrkdwn_analysis import MarkdownDocument

# Exemple 1: Document Markdown avec diff√©rents types de liens
markdown_content = """# Mon Document de Test

## Section avec liens valides

Voici quelques liens vers des sites populaires:
- [Google](https://www.google.com)
- [GitHub](https://github.com)
- [Python Documentation](https://docs.python.org)

## Section avec liens potentiellement cass√©s

Attention, ces liens peuvent √™tre cass√©s:
- [Lien cass√© 1](https://httpstat.us/404)
- [Lien cass√© 2](https://httpstat.us/500)
- [Lien timeout](https://httpstat.us/200?sleep=10000)

## Liens internes et non-HTTP

Ces liens ne seront pas v√©rifi√©s (car non-HTTP):
- [Lien interne](#section)
- [Fichier local](./fichier.md)

## Plus de liens externes

- [Wikipedia](https://wikipedia.org)
- [Stack Overflow](https://stackoverflow.com)
"""

def example_basic():
    """Exemple basique de v√©rification des liens."""
    print("=" * 70)
    print("EXEMPLE 1: V√©rification basique des liens")
    print("=" * 70)

    # Cr√©er le document depuis une cha√Æne
    doc = MarkdownDocument(markdown_content, from_string=True)

    # V√©rifier tous les liens (avec param√®tres par d√©faut)
    print("\nüîç V√©rification des liens en cours...")
    broken_links = doc.check_links()

    # Afficher les r√©sultats
    if not broken_links:
        print("‚úÖ Tous les liens sont valides!")
    else:
        print(f"‚ùå {len(broken_links)} lien(s) cass√©(s) trouv√©(s):\n")
        for link in broken_links:
            print(f"  ‚ö†Ô∏è  Ligne {link['line']}: {link['text']}")
            print(f"      URL: {link['url']}")
            if 'status_code' in link:
                print(f"      Code HTTP: {link['status_code']}")
            if 'error' in link:
                print(f"      Erreur: {link['error']}")
            print()

def example_with_parameters():
    """Exemple avec param√®tres personnalis√©s."""
    print("\n" + "=" * 70)
    print("EXEMPLE 2: V√©rification avec param√®tres personnalis√©s")
    print("=" * 70)

    doc = MarkdownDocument(markdown_content, from_string=True)

    # Param√®tres:
    # - timeout: 3 secondes (plus rapide)
    # - max_workers: 5 (moins de connexions parall√®les)
    print("\nüîç V√©rification avec timeout=3s, max_workers=5...")
    broken_links = doc.check_links(timeout=3, max_workers=5)

    print(f"R√©sultat: {len(broken_links)} lien(s) probl√©matique(s)")

def example_from_file():
    """Exemple depuis un fichier Markdown."""
    print("\n" + "=" * 70)
    print("EXEMPLE 3: V√©rification depuis le README.md")
    print("=" * 70)

    try:
        # Lire le README.md du projet
        doc = MarkdownDocument("README.md")

        # Obtenir d'abord les statistiques des liens
        link_stats = doc.get_link_statistics()
        print(f"\nüìä Statistiques:")
        print(f"   - Total de liens: {link_stats['total_links']}")
        print(f"   - Liens externes: {link_stats['external_links']}")
        print(f"   - Liens internes: {link_stats['internal_links']}")

        # V√©rifier les liens
        print(f"\nüîç V√©rification de {link_stats['external_links']} lien(s) externe(s)...")
        broken_links = doc.check_links(timeout=5, max_workers=10)

        if not broken_links:
            print("‚úÖ Tous les liens externes sont valides!")
        else:
            print(f"‚ùå {len(broken_links)} lien(s) cass√©(s):")
            for link in broken_links:
                print(f"   - {link['url']}")
                if 'status_code' in link:
                    print(f"     Code: {link['status_code']}")

    except FileNotFoundError:
        print("‚ùå Fichier README.md non trouv√©")

def example_comprehensive_report():
    """Exemple avec rapport complet."""
    print("\n" + "=" * 70)
    print("EXEMPLE 4: Rapport complet de validation")
    print("=" * 70)

    doc = MarkdownDocument(markdown_content, from_string=True)

    # 1. Obtenir tous les liens
    all_links = doc.get_links()
    text_links = all_links.get("Text link", [])

    print(f"\nüìã Analyse du document:")
    print(f"   - Total de liens: {len(text_links)}")

    # S√©parer les liens HTTP des autres
    http_links = [l for l in text_links if l['url'].startswith(('http://', 'https://'))]
    other_links = [l for l in text_links if not l['url'].startswith(('http://', 'https://'))]

    print(f"   - Liens HTTP/HTTPS: {len(http_links)}")
    print(f"   - Autres liens (internes/locaux): {len(other_links)}")

    # 2. V√©rifier les liens HTTP
    if http_links:
        print(f"\nüîç V√©rification des {len(http_links)} liens HTTP...")
        broken_links = doc.check_links(timeout=5, max_workers=10)

        # 3. Calculer les statistiques
        valid_count = len(http_links) - len(broken_links)
        success_rate = (valid_count / len(http_links)) * 100 if http_links else 0

        print(f"\nüìä R√©sultats de la v√©rification:")
        print(f"   ‚úÖ Liens valides: {valid_count}")
        print(f"   ‚ùå Liens cass√©s: {len(broken_links)}")
        print(f"   üìà Taux de succ√®s: {success_rate:.1f}%")

        # 4. D√©tails des liens cass√©s
        if broken_links:
            print(f"\n‚ö†Ô∏è  D√©tails des liens cass√©s:")
            for i, link in enumerate(broken_links, 1):
                print(f"\n   {i}. Texte: '{link['text']}'")
                print(f"      URL: {link['url']}")
                print(f"      Ligne: {link['line']}")
                if 'status_code' in link:
                    status_emoji = "üî¥" if link['status_code'] >= 500 else "üü†"
                    print(f"      {status_emoji} Code HTTP: {link['status_code']}")
                if 'error' in link:
                    print(f"      ‚ö†Ô∏è  Erreur: {link['error']}")

def example_validation_workflow():
    """Exemple d'un workflow complet de validation."""
    print("\n" + "=" * 70)
    print("EXEMPLE 5: Workflow complet de validation de document")
    print("=" * 70)

    doc = MarkdownDocument(markdown_content, from_string=True)

    print("\nüîç √âTAPE 1: Validation de la structure")
    print("-" * 70)
    structure_validation = doc.validate_structure()
    print(f"Score de structure: {structure_validation['score']}/100")
    if structure_validation['issues']:
        for issue in structure_validation['issues']:
            print(f"  [{issue['type']}] {issue['message']}")
    else:
        print("  ‚úÖ Structure valide")

    print("\nüîç √âTAPE 2: Statistiques du document")
    print("-" * 70)
    summary = doc.get_summary()
    print(f"  - Headers: {summary['headers']}")
    print(f"  - Paragraphes: {summary['paragraphs']}")
    print(f"  - Blocs de code: {summary['code_blocks']}")

    reading_time = doc.get_reading_time()
    print(f"  - Temps de lecture: {reading_time['formatted']}")

    print("\nüîç √âTAPE 3: V√©rification des liens")
    print("-" * 70)
    broken_links = doc.check_links(timeout=5, max_workers=10)
    if not broken_links:
        print("  ‚úÖ Tous les liens sont valides")
    else:
        print(f"  ‚ùå {len(broken_links)} lien(s) cass√©(s)")
        for link in broken_links[:3]:  # Afficher les 3 premiers
            print(f"     - {link['url']}")

    print("\n" + "=" * 70)
    print("‚úÖ VALIDATION TERMIN√âE")
    print("=" * 70)

if __name__ == "__main__":
    # Ex√©cuter tous les exemples
    try:
        example_basic()
        example_with_parameters()
        example_from_file()
        example_comprehensive_report()
        example_validation_workflow()

        print("\n\n" + "=" * 70)
        print("üìö R√âSUM√â DE L'UTILISATION DE check_links()")
        print("=" * 70)
        print("""
La m√©thode check_links() permet de v√©rifier tous les liens HTTP/HTTPS
dans un document Markdown de mani√®re parall√®le et performante.

SYNTAXE:
--------
broken_links = doc.check_links(timeout=5, max_workers=10)

PARAM√àTRES:
-----------
- timeout (int, d√©faut=5): Temps d'attente maximum en secondes par lien
- max_workers (int, d√©faut=10): Nombre de v√©rifications parall√®les

RETOUR:
-------
Liste de dictionnaires pour chaque lien cass√© avec:
- 'url': L'URL du lien
- 'line': Num√©ro de ligne dans le document
- 'text': Texte du lien
- 'status_code': Code HTTP si disponible (404, 500, etc.)
- 'error': Message d'erreur si exception

NOTES:
------
‚úì Seuls les liens HTTP/HTTPS sont v√©rifi√©s
‚úì Les liens internes (#section) et locaux (./file) sont ignor√©s
‚úì Utilise ThreadPoolExecutor pour performance optimale
‚úì Tente HEAD puis GET si le serveur ne supporte pas HEAD
        """)

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Interruption par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå Erreur: {e}")
